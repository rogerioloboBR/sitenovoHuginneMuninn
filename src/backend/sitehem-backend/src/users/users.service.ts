import {
  Injectable,
  ConflictException,
  NotFoundException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import * as bcrypt from 'bcrypt';
import { User } from '@prisma/client'; // N칚o precisamos de Role aqui diretamente, a menos que tipemos o retorno
import { RolesService } from '../roles/roles.service'; // 游녣 Importar RolesService

@Injectable()
export class UsersService {
  constructor(
    private prisma: PrismaService,
    private rolesService: RolesService, // 游녣 Injetar RolesService
  ) {}

  async create(createUserDto: CreateUserDto) {
    const existingUserByEmail = await this.prisma.user.findUnique({
      where: { email: createUserDto.email },
    });

    if (existingUserByEmail) {
      throw new ConflictException('Este email j치 est치 em uso.');
    }

    const saltOrRounds = 10;
    const hashedPassword = await bcrypt.hash(
      createUserDto.password,
      saltOrRounds,
    );

    const user = await this.prisma.user.create({
      data: {
        name: createUserDto.name,
        email: createUserDto.email,
        password: hashedPassword,
      },
    });

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { password, ...result } = user;
    return result;
  }

  async findAll() {
    return this.prisma.user.findMany({
      select: { // Seleciona quais campos retornar para n칚o expor a senha
        id: true,
        name: true,
        email: true,
        email_verified_at: true,
        is_active: true,
        created_at: true,
        updated_at: true,
        roles: { // 游녣 Incluir as associa칞칫es de perfis (UserRole)
          include: {
            role: true, // E os detalhes de cada perfil (Role)
          },
        },
      },
    });
  }

  async findOne(id: number) {
    const user = await this.prisma.user.findUnique({
      where: { id },
      select: { // Novamente, n칚o expor a senha e incluir perfis
        id: true,
        name: true,
        email: true,
        email_verified_at: true,
        is_active: true,
        created_at: true,
        updated_at: true,
        roles: { // 游녣 Incluir as associa칞칫es de perfis
          include: {
            role: true, // E os detalhes de cada perfil
          },
        },
      },
    });
    if (!user) {
      throw new NotFoundException(`Usu치rio com ID #${id} n칚o encontrado.`);
    }
    return user;
  }

  async findOneByEmailForAuth(email: string): Promise<User | null> {
    // Este m칠todo 칠 usado pela AuthService e precisa retornar o usu치rio com senha
    const user = await this.prisma.user.findUnique({
      where: { email },
    });
    return user; // Retorna o usu치rio completo, incluindo o hash da senha
  }

  async update(id: number, updateUserDto: UpdateUserDto) {
    const userToUpdate = await this.prisma.user.findUnique({ where: { id } });
    if (!userToUpdate) {
      throw new NotFoundException(`Usu치rio com ID #${id} n칚o encontrado para atualiza칞칚o.`);
    }

    if (updateUserDto.email && updateUserDto.email !== userToUpdate.email) {
      const existingUserByEmail = await this.prisma.user.findUnique({
        where: { email: updateUserDto.email },
      });
      if (existingUserByEmail && existingUserByEmail.id !== id) {
        throw new ConflictException('Este email j치 est치 em uso por outro usu치rio.');
      }
    }

    const dataToUpdate: any = { ...updateUserDto };

    if (updateUserDto.password) {
      const saltOrRounds = 10;
      dataToUpdate.password = await bcrypt.hash(
        updateUserDto.password,
        saltOrRounds,
      );
    } else {
      delete dataToUpdate.password;
    }

    const updatedUser = await this.prisma.user.update({
      where: { id },
      data: dataToUpdate,
      // N칚o vamos incluir 'roles' aqui, pois a atualiza칞칚o de perfis ser치 feita por endpoints dedicados
    });

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { password, ...result } = updatedUser;
    return result;
  }

  async remove(id: number) {
    const userExists = await this.prisma.user.findUnique({ where: { id } });
    if (!userExists) {
      throw new NotFoundException(`Usu치rio com ID #${id} n칚o encontrado para exclus칚o.`);
    }
    // O onDelete: Cascade na rela칞칚o User -> UserRole no schema.prisma
    // deve cuidar da remo칞칚o das associa칞칫es em user_roles.
    await this.prisma.user.delete({
      where: { id },
    });
    return { message: `Usu치rio com ID #${id} deletado com sucesso.` };
  }

  // --- NOVOS M칄TODOS PARA ASSOCIA칂츾O DE PERFIS (ROLES) ---

  async assignRoleToUser(userId: number, roleId: number) {
    // 1. Verificar se o Usu치rio existe
    // Usamos o findOne deste pr칩prio service, que j치 lan칞a NotFoundException
    await this.findOne(userId); // Garante que o usu치rio existe

    // 2. Verificar se o Perfil (Role) existe
    // Usamos o findOne do RolesService injetado
    await this.rolesService.findOne(roleId); // Lan칞ar치 NotFoundException se o perfil n칚o existir

    // 3. Verificar se a associa칞칚o j치 existe para evitar erro de chave duplicada
    const existingAssociation = await this.prisma.userRole.findUnique({
      where: {
        user_id_role_id: { // Nome do 칤ndice/chave prim치ria composta no schema.prisma
          user_id: userId,
          role_id: roleId,
        },
      },
    });

    if (existingAssociation) {
      throw new ConflictException('Este perfil j치 est치 atribu칤do a este usu치rio.');
    }

    // 4. Criar a associa칞칚o na tabela user_roles
    return this.prisma.userRole.create({
      data: {
        user_id: userId,
        role_id: roleId,
      },
      include: { // Opcional: retornar dados relacionados para confirma칞칚o
        user: { // Selecionar campos espec칤ficos do usu치rio para n칚o expor a senha
          select: { id: true, name: true, email: true }
        },
        role: true,
      },
    });
  }

  async removeRoleFromUser(userId: number, roleId: number) {
    // 1. Verificar se a associa칞칚o existe antes de tentar deletar
    const association = await this.prisma.userRole.findUnique({
      where: {
        user_id_role_id: {
          user_id: userId,
          role_id: roleId,
        },
      },
    });

    if (!association) {
      throw new NotFoundException(
        'Associa칞칚o entre este usu치rio e perfil n칚o encontrada para remo칞칚o.',
      );
    }

    // 2. Remover a associa칞칚o
    return this.prisma.userRole.delete({
      where: {
        user_id_role_id: {
          user_id: userId,
          role_id: roleId,
        },
      },
    });
  }
}