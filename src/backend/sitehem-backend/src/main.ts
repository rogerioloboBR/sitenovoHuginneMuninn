// src/main.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common'; // ğŸ‘ˆ Importar ValidationPipe
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Configurar o ValidationPipe globalmente
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // Remove propriedades que nÃ£o estÃ£o no DTO
      forbidNonWhitelisted: true, // LanÃ§a erro se propriedades nÃ£o listadas forem enviadas
      transform: true, // Transforma o payload para o tipo do DTO (ex: string para nÃºmero se anotado)
    }),
  );

  // --- ConfiguraÃ§Ã£o do Swagger (OpenAPI) ---
  const config = new DocumentBuilder() // ğŸ‘ˆ 2. Crie uma instÃ¢ncia do DocumentBuilder
    .setTitle('API HeM E-commerce & Blog') // ğŸ‘ˆ Defina o tÃ­tulo da sua API
    .setDescription(
      'DocumentaÃ§Ã£o detalhada da API para o projeto de e-commerce e blog Hemb.', // ğŸ‘ˆ Defina uma descriÃ§Ã£o
    )
    .setVersion('1.0') // ğŸ‘ˆ Defina a versÃ£o da sua API
    .addTag('Auth', 'OperaÃ§Ãµes de AutenticaÃ§Ã£o') // Adiciona uma "tag" para agrupar rotas de AutenticaÃ§Ã£o
    .addTag('Users', 'OperaÃ§Ãµes relacionadas a UsuÃ¡rios') // Adiciona uma "tag" para UsuÃ¡rios
    // VocÃª adicionarÃ¡ mais tags aqui Ã  medida que criar novos mÃ³dulos (Products, Orders, BlogPosts, etc.)
    .addBearerAuth( // ğŸ‘ˆ 3. ConfiguraÃ§Ã£o para autenticaÃ§Ã£o JWT (Bearer Token)
      {
        type: 'http', // Tipo de esquema de seguranÃ§a
        scheme: 'bearer', // Esquema (bearer para JWT)
        bearerFormat: 'JWT', // Formato do token
        name: 'JWT', // Nome da definiÃ§Ã£o de seguranÃ§a
        description: 'Insira o token JWT', // DescriÃ§Ã£o para a UI
        in: 'header', // Onde o token Ã© esperado (no header Authorization)
      },
      'access-token', // Este Ã© um nome/chave para esta definiÃ§Ã£o de seguranÃ§a. Usaremos em @ApiBearerAuth() nos controllers.
    )
    .build(); // ğŸ‘ˆ 4. ConstrÃ³i o objeto de configuraÃ§Ã£o

  const document = SwaggerModule.createDocument(app, config); // ğŸ‘ˆ 5. Cria o documento OpenAPI
  SwaggerModule.setup('api-docs', app, document); // ğŸ‘ˆ 6. Configura o endpoint para a UI do Swagger
  // A UI do Swagger estarÃ¡ disponÃ­vel em http://localhost:3000/api-docs

  // --- Fim da ConfiguraÃ§Ã£o do Swagger ---
  await app.listen(3000);
  console.log(`Application is running on: ${await app.getUrl()}`);
}
bootstrap();