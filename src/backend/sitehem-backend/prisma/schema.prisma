// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // A linha output foi removida daqui
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
// Adicione este novo modelo para Permission
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(100) // Ex: "products.create", "users.view_all", "posts.publish"
  description String?  @db.VarChar(255)        // Descri√ß√£o amig√°vel da permiss√£o
  group_name  String?  @db.VarChar(50)         // Agrupador para UI (ex: "Produtos", "Usu√°rios")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  roles RolePermission[] // Rela√ß√£o com a tabela de jun√ß√£o RolePermission

  @@map("permissions")
}

// Adicione este novo modelo para a tabela de jun√ß√£o RolePermission
model RolePermission {
  role_id       Int
  permission_id Int
  assigned_at   DateTime @default(now())

  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([role_id, permission_id]) // Chave prim√°ria composta
  @@map("role_permissions")
}

// Modifique seu modelo Role existente para adicionar a rela√ß√£o com RolePermission
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  users       UserRole[]
  permissions RolePermission[] // üëà Adicione esta linha para a rela√ß√£o com RolePermission

  @@map("roles")
}

// Adicione este modelo para a tabela de jun√ß√£o UserRole
model UserRole {
  user_id     Int
  role_id     Int
  assigned_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([user_id, role_id]) // Chave prim√°ria composta
  @@map("user_roles")
}

// Modifique seu modelo User existente para adicionar a rela√ß√£o com UserRole
model User {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  email_verified_at DateTime?
  password          String
  remember_token    String?
  is_active         Boolean   @default(true)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  roles    UserRole[] // üëà Adicione esta linha para a rela√ß√£o com UserRole

  // ... (outras rela√ß√µes que vir√£o depois, como addresses, orders, etc.)
  // addresses Address[]
  // orders    Order[]
  // blog_posts BlogPost[]
  // blog_comments BlogComment[]

  @@map("users")
}
